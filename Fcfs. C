# FCFS
scheduling Algorithm 
#include <stdio.h>
struct fcfs
{
    int pid;
    int at;
    int pt;

};
void accept(struct fcfs list[],int f);
void sort(struct fcfs list[],int f);
void display(struct fcfs list[],int f);
void GanttChart(struct fcfs list[],int f);
void maintable(struct fcfs list[],int f);


int main()
{    struct fcfs data[20];
	int n;
    printf("---------------------------------------------------FCFS SHEDULING-------------------------------------------------------\n\n");
    start:
	printf("\n\nenter total no of processes(maximum 20):");
	scanf("%d",&n);
	if(n>20 || n<1)
    {
        printf("\n\nenter between 1 to 20 processes!!!!");
        goto start;
    }
    else{
	accept(data,n);
	sort(data,n);
	display(data,n);
	GanttChart(data,n);
	maintable(data,n);}
}
void accept(struct fcfs list[20],int s)
	{
	    for(int i=0;i<s;i++)
	{
	    printf("\n\n[PROCESS %d]",i+1);

	list[i].pid=i+1;
	printf("\nenter arrival time of process p[%d]:",i+1);
	scanf("%d",&list[i].at);
	printf("\nenter processing time of process p[%d]:",i+1);
	scanf("%d",&list[i].pt);
	}
	}
	void display(struct fcfs list[20],int s)
    {
         int i;
         printf("\n\n        [FCFS TABLE]                                        ");
	printf("\n\n+------------+-----------------+--------------------+");
	printf("\n|  PROCESS   |  ARRIVAL TIME   |  PROCESSING TIME   |");
    printf("\n+------------+-----------------+--------------------+");
    printf("\n+----------------------------------------------------");
	for(i=0;i<s;i++)
	{
	printf("\n|  P[%2d]     |      %2d         |        %2d          |",list[i].pid,list[i].at,list[i].pt);
    printf("\n+------------+-----------------+--------------------+");
	}}
	//ascending of at
	void sort(struct fcfs list[20],int s)
    {
        int i,j;
        struct fcfs temp;
	for(i=0;i<s;i++)
    {
        for(j=i+1;j<s;j++)
        {
            if(list[i].at>list[j].at)
            {
                temp=list[i];
                list[i]=list[j];
                list[j]=temp;
            }
        }
    }
    }
	void  GanttChart(struct fcfs list[20],int s)
	{
	    int i;
           int k=0;
	printf("\n\n\n-----------------------------------------GANTT-CHART--------------------------------------------------\n\n");


    for(i=0;i<s;i++)
    {
        printf(" -------");
    }
        printf("\n");
    for(i=0;i<s;i++)
    {
        printf("|  p[%d] ",list[i].pid);
    }
        printf("|\n");
        for(i=0;i<s;i++)
    {
        printf(" -------");
    }
    printf("\n");
    printf("0  \t");


for(i=0;i<s;i++)
    {
        k=k+list[i].pt;
        printf("%d\t",k);
    }
	}


	void maintable(struct fcfs list[20],int s)
	{
	     int i,k=0,tat[20],wt[20];float totat=0,towt=0,idolt=0;
	     float avwt,avtat,cput,thput;
	     printf("\n\n\n                     [SOLUTION TABLE]                                           ");
	printf("\n+---------+-----------------------+--------------------+----------------+");
	printf("\n|  TIME   |   PROCESS COMPLETED   |  TURNAROUND TIME   |  WAITING TIME  |");
    printf("\n+---------+-----------------------+--------------------+----------------+");
    printf("\n+------------------------------------------------------------------------");
	for(i=0;i<s;i++)
	{
	    k=k+list[i].pt;
	    tat[i]=k-list[i].at;
	    wt[i]=tat[i]-list[i].pt;
	    totat=totat+tat[i];
	    towt=towt+wt[i];

	printf("\n|  %2d     |      P[%2d]            |        %2d          |       %2d       |",k,list[i].pid,tat[i],wt[i]);
    printf("\n+---------+-----------------------+--------------------+----------------+");
	}
	avtat=totat/s;
	avwt=towt/s;
	cput=k/(k+idolt);
	thput=(float)s/k;
	printf("\n\n\n---------------------------------------------solution-----------------------------------------------");
	printf("\n\n AVERAGE TURNAROUND TIME=%2.2f ms",avtat);
    printf("\n\n AVERAGE WAITING TIME=%2.2f ms",avwt);
	printf("\n\n CPU UTILIZATION=%2.2f %%",cput*100);
	printf("\n\n THROUGHTPUT=%2.2f process/ms \n",thput);

	}

